ЗАДАНИЕ 4:


    На сайте есть курсы по обучению чему либо. Курс относится какой либо категории. Например для обучения программированию есть python, java, javascript. И курсы python для новичков, java для профи, …
    Также на сайте есть студенты, которые могут записаться на один или несколько курсов ### 3. Это минимальный функционал, на котором мы будем отрабатывать шаблоны, можно будет его расширить. ### 4. В данном домашнем задании требуется добавить следующий функционал:
    Создание категории курсов
    Вывод списка категорий
    Создание курса
    Вывод списка курсов ### 5. Далее можно сделать всё или одно на выбор, применив при этом один из порождающих паттернов, либо аргументировать почему данные паттерны не были использованы:
    На сайте могут быть курсы разных видов: офлайн (в живую) курсы (для них указывается адрес проведения) и онлайн курсы (вебинары), для них указывается вебинарная система. Также известно что в будущем могут добавиться новые виды курсов
    Реализовать простой логгер (не используя сторонние библиотеки). У логгера есть имя. Логгер с одним и тем же именем пишет данные в один и тот же файл, а с другим именем в другой
    Реализовать страницу для копирования уже существующего курса (Для того чтобы снова с нуля не создавать курс, а скопировать существующий и немного отредактировать)


ЗАДАНИЕ 5:

	1. Добавить декоратор для добавления связки url-view в приложение, чтобы можно было добавлять url-ы, как в фреймворке Flask @app(‘/some_url/’)
	2. Добавить декоратор @debug, для view, если мы указываем данный декоратор над view, то в терминал выводятся название функции и время ее выполнения
	3. Добавить подкатегорий. Т.е. категория курса может входит в другую категорию, а может не входить и вложенность может быть любая. Например: Программирование->Web->Python->Django. После на страницу списка категорий добавить вывод количества курсов в каждой из категорий. Например Программирование - 10, Web - 5, Python - 3, …
	4. Добавить 2 новых вида wsgi-application. Первый - логирующий (такой же как основной, только он для каждого запроса выводит информацию (тип запроса и параметры) в консоль. Второй - фейковый (на все запросы пользователя отвечает “200 OK”, “Hello from Fake”)
	5. По желанию можно добавить любой другой полезный функционал


ЗАДАНИЕ 6:

	1. Реализовать создание студента (регистрация). Список студентов. Запись студента на курс.
	2. Далее можно сделать всё или одно на выбор, применив при этом один из структурных паттернов, либо аргументировать почему данные паттерны не были использованы:

    Создать страницу для изменения курса. После изменения отправлять уведомления всем студентам на курсе по sms, email (для имитации можно просто выводить сообщения в консоль). Также известно, что в будущем способов уведомления будет больше
    Добавить возможность применять цикл for к объекту категории курса (в каждой итерации получаем курс) и объекта курса (в каждой итерации получаем студента). Например for student in course: … for course in group
    Создать api для курсов. По определенному адресу выводить не веб-страницу, а отдавать пользователю данные о списке курсов в формате json
    Улучшить логгер (или добавить если его нет). Добавить в логгер возможность писать в файл, в консоль. Также известно что в будущем вариантов сохранения может быть еще больше
    Реализовать CBV (Class Based VIews). Возможность создавать view в виде класса (по аналогии с Django). И убрать таким образом часть дублирования во view


ЗАДАНИЕ 7:

	1. Добавить базу данных к своему проекту
	2. Для этого использовать паттерн Data Mapper
	3. Использовать паттерн Unit of Work
	4. Можно попробовать дополнительно реализовать Identity Map


ЗАДАНИЕ 8:

	1. Провести анализ своего проекта на использование антипаттернов. Какие антипаттерны удалось обнаружить?
	2. Продумать методы устранения.


ЗАДАНИЕ 9:
	
	1. Доделать проект в рамках дз 1-8. Можно добавить любой новый полезный функционал в wsgi-фреймворк бизнес логику или взаимодействие с базой данных
	2. * Продумать архитектуру проекта для командной разработки (следующий курс)
